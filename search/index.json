[{"content":"Introduction This project implements a C++ program for realistic scene rendering. The rendering algorithm is based on random gradual photon mapping (SPPM). The renderer can render mesh with textures and parametric surfaces (intersections are solved by iterative analytic equations), and the depth of field can be achieved by simulating focal length.\nAlgorithms I use two KD-Tree and a quadtree to accelerate the process of rendering. The former is used for mesh intersection acceleration, and the latter is used for parametric surfaces intersection acceleration. I also used OpenMP for trivial parallel computing acceleration.\nThe parametric surfaces are calculated with Newton iterative method, the quadtree is important because the convergence of this method depends much on the initial value, so the ray need first intersect the bounding box of the parametric surface, which is built on quadtree.\nThe rendering of texture is implemented by two methods. The first method is matching the pixels of the picture to a single triangular surface, which is simple but just works with simple objects (e.g. walls). The second method is carried out by UV unfolding, by which every vertex has its color, so the color of every points on the surface can be calculated by the interpolation on the center of gravity.\nDepth of field is easy to implement as the expansion of a function. Change the source point from the origin to a disk (aperture) and random sample on it, then make the light pass the focal point before it ejects. After that operation, multiple points outside the focal plane will correspond to one pixel, and there is an effect of depth of field.\nResult I have rendered two scenes.\nThe first scene depicts a palace with a big mirror, where a rabbit and two dragons are doing something with two crystal balls. (It is like a game scene in my mind , though I have not actually\nconsidered about the story about it :D)\n\rresult-20\r The second scene is indeed a test of the parametric surface and the simulation of depth of field, which is a lot trivial.\n![Room(Small Aperture)](Room(Small Aperture).bmp)\n","date":"2020-06-21T00:00:00Z","image":"http://czzzzh.github.io/p/photorealistic-renderer/result-20_hucca6c26b05c849769d740e830a04192a_37748790_120x120_fill_box_smart1.bmp","permalink":"http://czzzzh.github.io/p/photorealistic-renderer/","title":"Photorealistic Renderer"}]