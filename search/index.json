[{"content":"See https://github.com/CzzzzH/EDC22-TeamYosoro\nIntroduction This engineering project is a design for the 22th Electronic Design Competition of Tsinghua University, and it finally achieves the third prize(top 5% of all teams).\nWe use Arduino Mega 2560 as our controller, which enables our electric car to drive itself directed by the black taps on the floor and finishes the tasks in the competition. The modules installed on the car include Bluetooth, ZigBee, gyroscope and lots of infrared sensors.\nWe designed a complex state machine to keep the car running steadily. The detailed implement can be checked in our codes.\nImages  The car is running on the floor directed by the black tap.  \rcar\r\n The whole appearance of the electric car  \rbody\r\n We build a simple site to simulate the competition in our dormitory.  \rground\r\nOthers This project is collaborated with Fishming Yu、 Bowman Chow. I really appreciate my teammates for their hard work on this project.\n","date":"2020-12-11T00:00:00Z","image":"http://czzzzh.github.io/p/amazing-electric-car/car_hu8e2bc2b1e4948781e260abfee34ce611_4369502_120x120_fill_q75_box_smart1.jpg","permalink":"http://czzzzh.github.io/p/amazing-electric-car/","title":"Amazing Electric Car"},{"content":"See https://github.com/CzzzzH/ETSHelper\nIntroduction The bot is based on Nonebot (A asynchronous framework of QQ chatbot) and Jittor (A Just-in-time(JIT) deep learning framework). The former provides communication services for the bot , and the latter helps crack captcha on the website.\nUsage  You need construct dataset with captcha data on the official test registration website and install Jittor. Then train the model. Start to get GRE/TOEFL test seats status with gre_seat.py / toefl_seat.py. Selenium and mysql is required in this process.. Deploy your own QQ chatbot with software supported by Nonebot. (e.g. Mirai) Run bot.py to start the query service.  Demo You can add the demo bot (QQ:2758720749) for instant querying service.\nThis bot is currently unavailable in terms of the change of the ETS official website, so the bot and this repository is waiting for update. ","date":"2020-08-01T00:00:00Z","image":"http://czzzzh.github.io/p/etshelper/demo_hu8bbd2c8c38e92f21c0b316c8deb2643f_306878_120x120_fill_q75_box_smart1.jpg","permalink":"http://czzzzh.github.io/p/etshelper/","title":"ETSHelper"},{"content":"See https://github.com/CzzzzH/Photorealistic-Renderer\nIntroduction This project implements a C++ program for realistic scene rendering. The rendering algorithm is based on Stochastic Progressive Photon Mapping (SPPM). The renderer can render mesh with textures and parametric surfaces (intersections are solved by iterative analytic equations), and the depth of field can be achieved by simulating focal length.\nAlgorithms I use two KD-Tree and a quadtree to accelerate the process of rendering. The former is used for mesh intersection acceleration, and the latter is used for parametric surfaces intersection acceleration. I also used OpenMP for trivial parallel computing acceleration.\nThe parametric surfaces are calculated with Newton iterative method, the quadtree is important because the convergence of this method depends much on the initial value, so the ray need first intersect the bounding box of the parametric surface, which is built on quadtree.\nThe rendering of texture is implemented by two methods. The first method is matching the pixels of the picture to a single triangular surface, which is simple but just works with simple objects (e.g. walls). The second method is carried out by UV unfolding, by which every vertex has its color, so the color of every points on the surface can be calculated by the interpolation on the center of gravity.\nDepth of field is easy to implement as the expansion of a function. Change the source point from the origin to a disk (aperture) and random sample on it, then make the light pass the focal point before it ejects. After that operation, multiple points outside the focal plane will correspond to one pixel, and there is an effect of depth of field.\nResult I have rendered two scenes.\nThe first scene depicts a palace with a big mirror, where a rabbit and two dragons are doing something with two crystal balls. (It is like a game scene in my mind , though I have not actually\nconsidered about the story about it :D)\n\rresult-20\r\nThe second scene is indeed a test of the parametric surface and the simulation of depth of field, which is a lot trivial.\n\rRoom(Small Aperture)\r\n","date":"2020-06-21T00:00:00Z","image":"http://czzzzh.github.io/p/photorealistic-renderer/1_hucca6c26b05c849769d740e830a04192a_37748790_120x120_fill_box_smart1.bmp","permalink":"http://czzzzh.github.io/p/photorealistic-renderer/","title":"Photorealistic Renderer"},{"content":"See https://github.com/CzzzzH/TuneStory\nIntroduction This project is a tiny Music Game developped by Qt\nThe game only runs at 1920 * 1080 resolution and the platform of Windows.\nYou can make your own song charts in this game, and the guide is included in the 制谱指南.txt\nCurrently the game server is down, so the user system and leaderboards are not available now. You can still play with the single game.\nScreenshots \r1\r\n\r2\r\n\r3\r\n\r4\r\n\r5\r\n\r6\r\nTrial Play Video You can check it on bilibili:\n[TuneStory] FUJIN Rumble Hard lv.08 Trial Play\nOthers Thanks to Spitlight for helping me test the game throughout and recording the Trial Play Video.\nThanks to all the players who participated in the playtest.\n","date":"2019-04-12T00:00:00Z","image":"http://czzzzh.github.io/p/tunestory/2_hu158058fb334e1ce6ac5642621169d58e_72515_120x120_fill_q75_box_smart1.jpg","permalink":"http://czzzzh.github.io/p/tunestory/","title":"TuneStory"}]