<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MorPhLing&#39;s Space</title>
    <link>http://czzzzh.github.io/post/</link>
    <description>Recent content in Posts on MorPhLing&#39;s Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://czzzzh.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ETSHelper</title>
      <link>http://czzzzh.github.io/p/etshelper/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://czzzzh.github.io/p/etshelper/</guid>
      <description>See https://github.com/CzzzzH/ETSHelper
Introduction The bot is based on Nonebot (A asynchronous framework of QQ chatbot) and Jittor (A Just-in-time(JIT) deep learning framework). The former provides communication services for the bot , and the latter helps crack captcha on the website.
Usage  You need construct dataset with captcha data on the official test registration website and install Jittor. Then train the model. Start to get GRE/TOEFL test seats status with gre_seat.</description>
    </item>
    
    <item>
      <title>Photorealistic Renderer</title>
      <link>http://czzzzh.github.io/p/photorealistic-renderer/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://czzzzh.github.io/p/photorealistic-renderer/</guid>
      <description>Introduction This project implements a C++ program for realistic scene rendering. The rendering algorithm is based on random gradual photon mapping (SPPM). The renderer can render mesh with textures and parametric surfaces (intersections are solved by iterative analytic equations), and the depth of field can be achieved by simulating focal length.
Algorithms I use two KD-Tree and a quadtree to accelerate the process of rendering. The former is used for mesh intersection acceleration, and the latter is used for parametric surfaces intersection acceleration.</description>
    </item>
    
    <item>
      <title>TuneStory</title>
      <link>http://czzzzh.github.io/p/tunestory/</link>
      <pubDate>Fri, 12 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://czzzzh.github.io/p/tunestory/</guid>
      <description>See https://github.com/CzzzzH/TuneStory
Introduction This project is a tiny Music Game developped by Qt
The game only runs at 1920 * 1080 resolution and the platform of Windows.
You can make your own song charts in this game, and the guide is included in the 制谱指南.txt
Currently the game server is down, so the user system and leaderboards are not available now. You can still play with the single game.
Screenshots 1</description>
    </item>
    
  </channel>
</rss>
